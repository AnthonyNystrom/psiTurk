// Generated by CoffeeScript 1.6.3
(function() {
  define(['jquery', 'underscore', 'backbone', 'router', 'models/ConfigModel', 'models/AtAGlanceModel', 'views/SidebarView', 'views/ContentView', 'text!templates/overview.html', 'text!templates/sidebar.html', 'views/HITView', 'models/HITModel', 'collections/HITCollection', 'views/RunExptView'], function($, _, Backbone, Router, ConfigModel, AtAGlanceModel, SidebarView, ContentView, OverviewTemplate, SideBarTemplate, HITView, HIT, HITs, RunExptView) {
    return {
      events: {
        'click a': 'pushstateClick',
        'click li': 'pushstateClick'
      },
      pushstateClick: function(event) {
        return event.preventDefault();
      },
      getCredentials: function() {
        var _this = this;
        $('#aws-info-modal').modal('show');
        return $('.save').click(function(event) {
          event.preventDefault();
          _this.saveConfig(event);
          return $('#aws-info-modal').modal('hide');
        });
      },
      verifyAWSLogin: function() {
        var config, configPromise,
          _this = this;
        config = new ConfigModel;
        configPromise = config.fetch();
        return configPromise.done(function() {
          var inputData, key_id, secret_key;
          key_id = config.get("AWS Access").aws_access_key_id;
          secret_key = config.get("AWS Access").aws_secret_access_key;
          inputData = {};
          inputData["aws_access_key_id"] = key_id;
          inputData["aws_secret_access_key"] = secret_key;
          return $.ajax({
            url: "/verify_aws_login",
            type: "POST",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(inputData),
            success: function(response) {
              if (response.aws_accnt === 0) {
                _this.getCredentials();
                return $('#aws-indicator').css("color", "red").attr("class", "icon-lock");
              } else {
                return $('#aws-indicator').css("color", "white").attr("class", "icon-unlock");
              }
            },
            error: function() {
              return console.log("aws verification failed");
            }
          });
        });
      },
      getExperimentStatus: function() {
        return $.ajax({
          url: '/get_hits',
          type: "GET",
          success: function(data) {
            if (data.hits.length > 0) {
              $('#experiment_status').css({
                "color": "green"
              });
              return $('#run').css({
                "color": "grey"
              });
            } else {
              $('#experiment_status').css({
                "color": "grey"
              });
              return $('#run').css({
                "color": "orange"
              });
            }
          }
        });
      },
      launchPsiTurkServer: function() {
        return $.ajax({
          url: '/launch',
          type: "GET"
        });
      },
      stopPsiTurkServer: function() {
        $('#server-off-modal').modal('show');
        return $('#shutdownServerBtn').on("click", function() {
          return $.ajax({
            url: '/shutdown_psiturk',
            type: "GET",
            success: $('#server-off-modal').modal('hide')
          });
        });
      },
      saveConfig: function(event) {
        var configData, configPromise, inputData, section,
          _this = this;
        event.preventDefault();
        section = $(event.target).data('section');
        inputData = {};
        configData = {};
        $.each($('#myform').serializeArray(), function(i, field) {
          return inputData[field.name] = field.value;
        });
        configData[section] = inputData;
        this.config = new ConfigModel;
        configPromise = this.config.fetch();
        return configPromise.done(function() {
          return _this.config.save(configData, {
            complete: function() {
              return _this.verifyAWSLogin();
            }
          });
        });
      },
      monitorPsiturkServer: function() {
        var UP;
        UP = 0;
        $.ajax({
          url: "/monitor_server"
        });
        return $.doTimeout('server_poll', 1000, function() {
          $.ajax({
            url: "/server_status",
            success: function(data) {
              var server;
              server = parseInt(data.state);
              if (server === UP) {
                $('#server_status').css({
                  "color": "green"
                });
                $('#server_on').css({
                  "color": "grey"
                });
                return $('#server_off').css({
                  "color": "orange"
                });
              } else {
                $('#server_status').css({
                  "color": "red"
                });
                $('#server_off').css({
                  "color": "grey"
                });
                return $('#server_on').css({
                  "color": "orange"
                });
              }
            }
          });
          return true;
        });
      },
      loadAWSData: function() {
        var atAGlancePromise, contentView,
          _this = this;
        this.ataglance = new AtAGlanceModel;
        atAGlancePromise = this.ataglance.fetch();
        atAGlancePromise.done(function() {
          var configPromise;
          _this.config = new ConfigModel;
          configPromise = _this.config.fetch();
          return configPromise.done(function() {
            var overview, sideBarHTML, sidebarView;
            overview = _.template(OverviewTemplate, {
              input: {
                balance: _this.ataglance.get("balance"),
                debug: _this.config.get("Server Parameters").debug === "True" ? "checked" : "",
                using_sandbox: _this.config.get("HIT Configuration").using_sandbox === "True" ? "checked" : ""
              }
            });
            $('#content').html(overview);
            sideBarHTML = _.template(SideBarTemplate);
            $('#sidebar').html(sideBarHTML);
            return sidebarView = new SidebarView({
              config: _this.config,
              ataglance: _this.ataglance
            });
          });
        });
        contentView = new ContentView();
        return contentView.initialize();
      },
      captureUIEvents: function() {
        var updateExperimentStatus,
          _this = this;
        updateExperimentStatus = _.bind(this.getExperimentStatus, this);
        $("#server_off").on("click", function() {
          return _this.stopPsiTurkServer();
        });
        $("#server_on").on("click", function() {
          return _this.launchPsiTurkServer();
        });
        return $('.restart').on("click", function(event) {
          _this.saveConfig(event);
          _this.stopPsiTurkServer();
          return _this.launchPsiTurkServer();
        });
      },
      initialize: function() {
        Router.initialize();
        this.monitorPsiturkServer();
        this.loadAWSData();
        this.getExperimentStatus();
        this.verifyAWSLogin();
        return this.captureUIEvents();
      }
    };
  });

}).call(this);
