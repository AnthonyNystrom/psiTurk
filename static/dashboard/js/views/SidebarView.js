// Generated by CoffeeScript 1.6.1
(function() {
  var e = {}.hasOwnProperty, t = function(t, n) {
    function i() {
      this.constructor = t;
    }
    for (var r in n) e.call(n, r) && (t[r] = n[r]);
    i.prototype = n.prototype;
    t.prototype = new i;
    t.__super__ = n.prototype;
    return t;
  };
  define([ "backbone", "text!templates/aws-info.html", "text!templates/overview.html", "text!templates/hit-config.html", "text!templates/database.html", "text!templates/server-params.html", "text!templates/expt-info.html", "views/validators" ], function(e, n, r, i, s, o, u, a) {
    var f;
    return f = function(e) {
      function f() {
        return f.__super__.constructor.apply(this, arguments);
      }
      t(f, e);
      f.prototype.save = function(e) {
        var t, n, i, s;
        e.preventDefault();
        s = $(e.target).data("section");
        i = {};
        t = {};
        $.each($("#myform").serializeArray(), function(e, t) {
          return i[t.name] = t.value;
        });
        t[s] = i;
        this.options.config.save(t);
        $("li").removeClass("selected");
        $("#overview").addClass("selected");
        n = this.options.config.fetch;
        n.done(function() {
          var e;
          e = _.template(r, {
            input: {
              balance: this.options.ataglance.get("balance"),
              debug: this.options.config.get("Server Parameters").debug === "True" ? "checked" : "",
              using_sandbox: this.options.config.get("HIT Configuration").using_sandbox === "True" ? "checked" : ""
            }
          });
          return $("#content").html(e);
        });
        $.ajax({
          url: "/monitor_server"
        });
        return this.render();
      };
      f.prototype.pushstateClick = function(e) {
        return e.preventDefault();
      };
      f.prototype.events = {
        "click a": "pushstateClick",
        "click .save_data": "save",
        "click #server-parms-save": "serverParamsSave",
        "click input#debug": "saveDebugState",
        "click input#using_sandbox": "saveUsingSandboxState"
      };
      f.prototype.serverParamsSave = function() {
        var e;
        this.save();
        e = this.options.config.fetch();
        return e.done(function() {
          var e, t, n;
          t = this.options.config.get("HIT Configuration").question_url + "/shutdown";
          n = /^https?\:\/\/([^\/:?#]+)(?:[\/:?#]|$)/i;
          console.log(this.options.config.get("Server Parameters").port);
          e = t.match(n)[0] + this.options.config.get("Server Parameters").port + "/shutdown";
          return $.ajax({
            url: e,
            type: "GET",
            data: {
              hash: this.options.config.get("Server Parameters").hash
            }
          });
        });
      };
      f.prototype.saveDebugState = function() {
        var e;
        e = $("input#debug").is(":checked");
        return this.options.config.save({
          "Server Parameters": {
            debug: e
          }
        });
      };
      f.prototype.saveUsingSandboxState = function() {
        var e;
        e = $("input#using_sandbox").is(":checked");
        return this.options.config.save({
          "HIT Configuration": {
            using_sandbox: e
          }
        });
      };
      f.prototype.initialize = function() {
        return this.render();
      };
      f.prototype.render = function() {
        var e = this;
        $("li").on("click", function() {
          $("li").removeClass("selected");
          return $(this).addClass("selected");
        });
        return $.when(this.options.config.fetch(), this.options.ataglance.fetch()).done(function() {
          var t, f, l, c, h, p;
          t = _.template(n, {
            input: {
              aws_access_key_id: e.options.config.get("AWS Access").aws_access_key_id,
              aws_secret_access_key: e.options.config.get("AWS Access").aws_secret_access_key
            }
          });
          c = _.template(i, {
            input: {
              title: e.options.config.get("HIT Configuration").title,
              description: e.options.config.get("HIT Configuration").description,
              keywords: e.options.config.get("HIT Configuration").keywords,
              question_url: e.options.config.get("HIT Configuration").question_url,
              max_assignments: e.options.config.get("HIT Configuration").max_assignments,
              hit_lifetime: e.options.config.get("HIT Configuration").hit_lifetime,
              reward: e.options.config.get("HIT Configuration").reward,
              duration: e.options.config.get("HIT Configuration").duration,
              us_only: e.options.config.get("HIT Configuration").us_only,
              approve_requirement: e.options.config.get("HIT Configuration").approve_requirement,
              using_sandbox: e.options.config.get("HIT Configuration").using_sandbox
            }
          });
          f = _.template(s, {
            input: {
              database_url: e.options.config.get("Database Parameters").database_url,
              table_name: e.options.config.get("Database Parameters").table_name
            }
          });
          h = _.template(o, {
            input: {
              host: e.options.config.get("Server Parameters").host,
              port: e.options.config.get("Server Parameters").port,
              cutoff_time: e.options.config.get("Server Parameters").cutoff_time,
              support_ie: e.options.config.get("Server Parameters").support_ie
            }
          });
          l = _.template(u, {
            input: {
              code_version: e.options.config.get("Task Parameters").code_version,
              num_conds: e.options.config.get("Task Parameters").num_conds,
              num_counters: e.options.config.get("Task Parameters").num_counters
            }
          });
          p = new a;
          $("#overview").on("click", function() {
            var t;
            t = e.options.config.fetch();
            return t.done(function() {
              var t;
              t = _.template(r, {
                input: {
                  balance: e.options.ataglance.get("balance"),
                  debug: e.options.config.get("Server Parameters").debug === "True" ? "checked" : "",
                  using_sandbox: e.options.config.get("HIT Configuration").using_sandbox === "True" ? "checked" : ""
                }
              });
              $("#content").html(t);
              return e.options.chart.refresh();
            });
          });
          $("#aws-info").on("click", function() {
            $("#content").html(t);
            return p.loadValidators();
          });
          $("#hit-config").on("click", function() {
            $("#content").html(c);
            return p.loadValidators();
          });
          $("#database").on("click", function() {
            $("#content").html(f);
            return p.loadValidators();
          });
          $("#server-params").on("click", function() {
            $("#content").html(h);
            return p.loadValidators();
          });
          return $("#expt-info").on("click", function() {
            $("#content").html(l);
            return p.loadValidators();
          });
        });
      };
      return f;
    }(e.View);
  });
}).call(this);