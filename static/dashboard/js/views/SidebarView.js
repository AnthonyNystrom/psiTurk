// Generated by CoffeeScript 1.6.1
(function() {
  var e = {}.hasOwnProperty, t = function(t, n) {
    function i() {
      this.constructor = t;
    }
    for (var r in n) e.call(n, r) && (t[r] = n[r]);
    i.prototype = n.prototype;
    t.prototype = new i;
    t.__super__ = n.prototype;
    return t;
  };
  define([ "backbone", "inspiritas", "text!templates/aws-info.html", "text!templates/overview.html", "text!templates/hit-config.html", "text!templates/database.html", "text!templates/server-params.html", "text!templates/expt-info.html", "views/validators" ], function(e, n, r, i, s, o, u, a, f) {
    var l;
    return l = function(e) {
      function n() {
        return n.__super__.constructor.apply(this, arguments);
      }
      t(n, e);
      n.prototype.el = $("#content");
      n.prototype.save = function(e) {
        var t, n, r, s;
        e.preventDefault();
        s = $(e.target).data("section");
        n = {};
        t = {};
        $.each($("#myform").serializeArray(), function(e, t) {
          return n[t.name] = t.value;
        });
        t[s] = n;
        this.options.config.save(t);
        $("li").removeClass("selected");
        $("#overview").addClass("selected");
        this.options.config.fetch({
          async: !1
        });
        r = _.template(i, {
          input: {
            balance: this.options.ataglance.get("balance"),
            debug: this.options.config.get("Server Parameters").debug === "True" ? "checked" : "",
            using_sandbox: this.options.config.get("HIT Configuration").using_sandbox === "True" ? "checked" : ""
          }
        });
        $("#content").html(r);
        loadCharts();
        $.ajax({
          url: "/monitor_server",
          async: !1
        });
        return this.render();
      };
      n.prototype.pushstateClick = function(e) {
        return e.preventDefault();
      };
      n.prototype.events = {
        "click a": "pushstateClick",
        "click .save_data": "save",
        "click #server-parms-save": "serverParamsSave",
        "click input#debug": "saveDebugState",
        "click input#using_sandbox": "saveUsingSandboxState"
      };
      n.prototype.serverParamsSave = function() {
        var e, t, n;
        t = this.options.config.get("HIT Configuration").question_url + "/shutdown";
        n = /^https?\:\/\/([^\/:?#]+)(?:[\/:?#]|$)/i;
        e = t.match(n)[0] + this.options.config.get("Server Parameters").port + "/shutdown";
        return $.ajax({
          url: e,
          type: "GET",
          data: {
            hash: this.options.config.get("Server Parameters").hash
          }
        });
      };
      n.prototype.saveDebugState = function() {
        var e;
        e = $("input#debug").is(":checked");
        return this.options.config.save({
          "Server Parameters": {
            debug: e
          }
        });
      };
      n.prototype.saveUsingSandboxState = function() {
        var e;
        e = $("input#using_sandbox").is(":checked");
        return this.options.config.save({
          "HIT Configuration": {
            using_sandbox: e
          }
        });
      };
      n.prototype.initialize = function() {
        return this.render();
      };
      n.prototype.render = function() {
        var e, t, n, l, c, h, p = this;
        $("li").on("click", function() {
          $("li").removeClass("selected");
          return $(this).addClass("selected");
        });
        this.options.config.fetch({
          async: !1
        });
        this.options.ataglance.fetch({
          async: !1
        });
        e = _.template(r, {
          input: {
            aws_access_key_id: this.options.config.get("AWS Access").aws_access_key_id,
            aws_secret_access_key: this.options.config.get("AWS Access").aws_secret_access_key
          }
        });
        l = _.template(s, {
          input: {
            title: this.options.config.get("HIT Configuration").title,
            description: this.options.config.get("HIT Configuration").description,
            keywords: this.options.config.get("HIT Configuration").keywords,
            question_url: this.options.config.get("HIT Configuration").question_url,
            max_assignments: this.options.config.get("HIT Configuration").max_assignments,
            hit_lifetime: this.options.config.get("HIT Configuration").hit_lifetime,
            reward: this.options.config.get("HIT Configuration").reward,
            duration: this.options.config.get("HIT Configuration").duration,
            us_only: this.options.config.get("HIT Configuration").us_only,
            approve_requirement: this.options.config.get("HIT Configuration").approve_requirement,
            using_sandbox: this.options.config.get("HIT Configuration").using_sandbox
          }
        });
        t = _.template(o, {
          input: {
            database_url: this.options.config.get("Database Parameters").database_url,
            table_name: this.options.config.get("Database Parameters").table_name
          }
        });
        c = _.template(u, {
          input: {
            host: this.options.config.get("Server Parameters").host,
            port: this.options.config.get("Server Parameters").port,
            cutoff_time: this.options.config.get("Server Parameters").cutoff_time,
            support_ie: this.options.config.get("Server Parameters").support_ie
          }
        });
        n = _.template(a, {
          input: {
            code_version: this.options.config.get("Task Parameters").code_version,
            num_conds: this.options.config.get("Task Parameters").num_conds,
            num_counters: this.options.config.get("Task Parameters").num_counters
          }
        });
        h = new f;
        $("#overview").on("click", function() {
          var e;
          p.options.config.fetch({
            async: !1
          });
          e = _.template(i, {
            input: {
              balance: p.options.ataglance.get("balance"),
              debug: p.options.config.get("Server Parameters").debug === "True" ? "checked" : "",
              using_sandbox: p.options.config.get("HIT Configuration").using_sandbox === "True" ? "checked" : ""
            }
          });
          $("#content").html(e);
          return loadCharts();
        });
        $("#aws-info").on("click", function() {
          $("#content").html(e);
          return h.loadValidators();
        });
        $("#hit-config").on("click", function() {
          $("#content").html(l);
          return h.loadValidators();
        });
        $("#database").on("click", function() {
          $("#content").html(t);
          return h.loadValidators();
        });
        $("#server-params").on("click", function() {
          $("#content").html(c);
          return h.loadValidators();
        });
        return $("#expt-info").on("click", function() {
          $("#content").html(n);
          return h.loadValidators();
        });
      };
      return n;
    }(e.View);
  });
}).call(this);